{"version":3,"file":"index.cjs.js","sources":["../src/client.ts","../src/provider.tsx","../src/useAuthInterpreter.ts","../src/useAuthenticationStatus.ts","../src/components/SignedIn.tsx","../src/components/SignedOut.tsx","../src/useAccessToken.ts","../src/useNhostClient.ts","../src/useAddSecurityKey.ts","../src/useAuthenticated.ts","../src/useAuthLoading.ts","../src/useChangeEmail.ts","../src/useChangePassword.ts","../src/useConfigMfa.ts","../src/useDecodedAccessToken.ts","../src/useFileUpload.ts","../src/useHasuraClaims.ts","../src/useHasuraClaim.ts","../src/useMultipleFilesUpload.ts","../src/useUserData.ts","../src/useNhostAuth.ts","../src/useNhostBackendUrl.ts","../src/useProviderLink.ts","../src/useResetPassword.ts","../src/useSendVerificationEmail.ts","../src/useSignInAnonymous.ts","../src/useSignInEmailPassword.ts","../src/useSignInEmailPasswordless.ts","../src/useSignInEmailSecurityKey.ts","../src/useSignInSmsPasswordless.ts","../src/useSignOut.ts","../src/useSignUpEmailPassword.ts","../src/useSignUpEmailSecurityKey.ts","../src/useUserAvatarUrl.ts","../src/useUserDefaultRole.ts","../src/useUserDisplayName.ts","../src/useUserEmail.ts","../src/useUserId.ts","../src/useUserIsAnonymous.ts","../src/useUserLocale.ts","../src/useUserRoles.ts"],"sourcesContent":["import { Subdomain } from '@nhost/nhost-js'\nimport { BackendUrl } from '@nhost/nhost-js'\nimport { NhostAuthConstructorParams, NhostClient as VanillaClient } from '@nhost/nhost-js'\n\nexport interface NhostReactClientConstructorParams\n  extends Partial<BackendUrl>,\n    Partial<Subdomain>,\n    Omit<NhostAuthConstructorParams, 'url' | 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n","import produce from 'immer'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\n\nimport { AuthContext, NhostSession } from '@nhost/core'\nimport { NhostClient } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\n\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostReactProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostReactProvider: React.FC<PropsWithChildren<NhostReactProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const machine = nhost.auth.client.machine\n  const interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce<AuthContext>(machine.context, (ctx: AuthContext) => {\n      if (initial) {\n        ctx.user = initial.user\n        ctx.refreshToken.value = initial.refreshToken ?? null\n        ctx.accessToken.value = initial.accessToken ?? null\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1_000)\n      }\n    })\n  }).start()\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  nhost.auth.client.interpreter = interpreter\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n","import { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\n\nimport { AuthMachine } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter) throw Error('No interpreter')\n  return interpreter\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } }),\n      connectionAttempts: state.context.importTokenAttempts\n    }),\n    (a, b) =>\n      a.isAuthenticated === b.isAuthenticated &&\n      a.isLoading === b.isLoading &&\n      a.connectionAttempts === b.connectionAttempts\n  )\n}\n","import { PropsWithChildren } from 'react'\n\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedIn />` to control the rendering of components for users. Components inside `<SignedIn />` are only rendered if the user is authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedOut } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedIn>\n *         <h1>Only rendered if the user is authenticated</h1>\n *       </SignedIn>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-in\n * @category Components\n */\n\nexport function SignedIn({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (!isAuthenticated) {\n    return null\n  }\n\n  return <>{children}</>\n}\n","import { PropsWithChildren } from 'react'\n\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedOut />` to control the rendering of components for users. Components inside `<SignedOut />` are only rendered if the user is not authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedOut } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedOut>\n *         <h1>Only rendered if the user is not authenticated</h1>\n *       </SignedOut>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-out\n * @category Components\n */\n\nexport function SignedOut({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (isAuthenticated) {\n    return null\n  }\n\n  return <>{children}</>\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import { useState } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/core'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = () => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.getSnapshot().matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * @deprecated\n * When using both {@link useAuthLoading} and {@link useAuthenticated} together, their initial state will change\n * three times:\n *\n * `(true, false)` -> `(false, false)` -> `(false, true)`\n *\n * Use {@link useAuthenticationStatus} instead.\n */\nexport const useAuthLoading = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.hasTag('loading'))\n}\n","import { useCallback, useMemo } from 'react'\n\nimport {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail({\n *     email: 'new@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions): ChangeEmailHookResult\n\n/**\n * @deprecated\n */\nexport function useChangeEmail(email?: string, options?: ChangeEmailOptions): ChangeEmailHookResult\n\nexport function useChangeEmail(a?: string | ChangeEmailOptions, b?: ChangeEmailOptions) {\n  const stateEmail = useMemo(() => (typeof a === 'string' ? a : undefined), [a])\n  const stateOptions = useMemo(() => (typeof a !== 'string' ? a : b), [a, b])\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail?: string | unknown, valueOptions = stateOptions) =>\n      changeEmailPromise(\n        service,\n        typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n        valueOptions\n      ),\n    [service, stateEmail, stateOptions]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n  /** @deprecated */\n  (password?: unknown): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n  /** @deprecated */\n  (email?: string): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = (statePassword?: string) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword?: string | unknown) =>\n    changePasswordPromise(\n      service,\n      typeof valuePassword === 'string' ? valuePassword : (statePassword as string)\n    )\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  }\n}\n","import jwt_decode from 'jwt-decode'\n\nimport { JWTClaims } from '@nhost/core'\n\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = () => {\n  const jwt = useAccessToken()\n  return jwt ? jwt_decode<JWTClaims>(jwt) : null\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(nhost, ref, {\n      file: params.file,\n      bucketId: params.bucketId || bucketId,\n      id,\n      name\n    })\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = () => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string) => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import { useState } from 'react'\n\nimport {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useFileUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(nhost, service, params)\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import { useMemo } from 'react'\n\nimport { useAuthenticationStatus } from './useAuthenticationStatus'\nimport { useUserData } from './useUserData'\n\n/**\n * @deprecated\n * This hook ensures backward compatibility with `@nhost/react-auth`, which is deprecated.\n */\nexport const useNhostAuth = () => {\n  const { isLoading, isAuthenticated } = useAuthenticationStatus()\n  const user = useUserData()\n  return useMemo(() => ({ isLoading, isAuthenticated, user }), [isLoading, isAuthenticated, user])\n}\n","import { useContext } from 'react'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * @deprecated Nhost services can now be split to subdomains to improve performance with CDN. Use `nhost.auth.url` or `nhost.storage.url` instead.\n * Use the hook `useNhostBackendUrl` to get the Nhost backend URL.\n *\n * @example\n * ```tsx\n * const nhostBackendUrl = useNhostBackendUrl()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-backend-url\n */\nexport const useNhostBackendUrl = () => {\n  const nhost = useContext(NhostReactContext)\n  return nhost.auth.client.backendUrl.replace('/v1/auth', '')\n}\n","import { useContext, useEffect, useState } from 'react'\n\nimport { encodeQueryParameters, Provider, ProviderOptions, rewriteRedirectTo } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions) => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      return encodeQueryParameters(\n        `${nhost.auth.client.backendUrl}/signin/provider/${provider}`,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, options as any)\n      )\n    }\n  })\n}\n","import { useMemo } from 'react'\n\nimport {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n  /** @deprecated */\n  (email?: string, options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (\n  a?: string | ResetPasswordOptions,\n  b?: ResetPasswordOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    resetPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n  /** @deprecated */\n  (email?: string, options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (\n  a?: string | SendVerificationEmailOptions,\n  b?: SendVerificationEmailOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    sendVerificationEmailPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import { SignInMfaTotpHandlerResult } from '@nhost/core'\nimport {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  signInMfaTotpPromise\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, password?: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\ninterface SendMfaOtpHander {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n  /** @deprecated */\n  (otp?: unknown): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHander\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, otp?: string): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = (\n  stateEmail?: string,\n  statePassword?: string,\n  stateOtp?: string\n) => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword?: string\n  ) =>\n    signInEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : stateEmail!,\n      typeof valuePassword === 'string' ? valuePassword : statePassword!\n    )\n\n  const sendMfaOtp: SendMfaOtpHander = (valueOtp?: string | unknown) =>\n    signInMfaTotpPromise(service, typeof valueOtp === 'string' ? valueOtp : stateOtp!)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const needsMfaOtp = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'needsMfa' } }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  SignInEmailPasswordState\n} from '@nhost/core'\nimport { signInEmailPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult extends SignInEmailPasswordState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\n/**\n * @deprecated\n */\nexport function useSignInEmailPasswordless(\n  email?: string,\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\nexport function useSignInEmailPasswordless(\n  a?: string | PasswordlessOptions,\n  b?: PasswordlessOptions\n) {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a === 'string' ? b : a\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    signInEmailPasswordlessPromise(\n      service,\n      (typeof valueEmail === 'string' ? valueEmail : stateEmail) as string,\n      valueOptions\n    )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { useState } from 'react'\n\nimport {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  SignInSmsPasswordlessState\n} from '@nhost/core'\nimport { signInSmsPasswordlessOtpPromise, signInSmsPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import { signUpEmailPasswordPromise, SignUpEmailPasswordState, SignUpOptions } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    password?: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (\n  a?: string | SignUpOptions,\n  b?: string,\n  c?: SignUpOptions\n) => {\n  const stateEmail: string | undefined = typeof a === 'string' ? a : undefined\n  const statePassword: string | undefined = typeof b === 'string' ? b : undefined\n  const stateOptions = c || (typeof a !== 'string' ? a : undefined)\n\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword = statePassword,\n    valueOptions = stateOptions\n  ) =>\n    signUpEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valuePassword as string,\n      valueOptions\n    )\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (email: string, options?: SignUpSecurityKeyOptions): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (email, options = hookOptions) =>\n    signUpEmailSecurityKeyPromise(service, email, options)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserAvatarUrl} instead */\nexport const useAvatarUrl = useUserAvatarUrl\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDefaultRole} instead */\nexport const useDefaultRole = useUserDefaultRole\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDisplayName} instead */\nexport const useDisplayName = useUserDisplayName\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserEmail} instead */\nexport const useEmail = useUserEmail\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserIsAnonymous} instead */\nexport const useIsAnonymous = useUserIsAnonymous\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => {\n    if (!state.matches('authentication.signedIn')) {\n      return []\n    }\n    return state.context.user?.roles || []\n  })\n}\n"],"names":["NhostClient","VanillaClient","params","NhostReactContext","createContext","NhostReactProvider","nhost","initial","props","machine","interpreter","useInterpret","produce","ctx","_a","_b","isInitialMount","useRef","useEffect","React","useAuthInterpreter","useContext","useAuthenticationStatus","service","useSelector","state","a","b","SignedIn","children","isAuthenticated","SignedOut","useAccessToken","useNhostClient","useAddSecurityKey","error","setError","useState","isSuccess","isError","isLoading","setIsLoading","nickname","result","addSecurityKeyPromise","useAuthenticated","setIsAuthenticated","newValue","useAuthLoading","useChangeEmail","stateEmail","useMemo","stateOptions","createChangeEmailMachine","s","needsEmailVerification","useCallback","valueEmail","valueOptions","changeEmailPromise","useChangePassword","statePassword","createChangePasswordMachine","valuePassword","changePasswordPromise","useConfigMfa","createEnableMfaMachine","isGenerating","isGenerated","isActivating","isActivated","qrCodeDataUrl","generateQrCodePromise","code","activateMfaPromise","useDecodedAccessToken","jwt","jwt_decode","useFileUploadItem","ref","add","bucketId","upload","uploadFilePromise","id","name","cancel","destroy","isUploading","isUploaded","progress","useFileUpload","createFileUploadMachine","useHasuraClaims","claims","useHasuraClaim","hasuraClaims","useMultipleFilesUpload","errors","setErrors","createMultipleFilesUploadMachine","uploadMultipleFilesPromise","clear","files","useUserData","useNhostAuth","user","useNhostBackendUrl","useProviderLink","options","isSSR","setIsSSR","_","provider","encodeQueryParameters","rewriteRedirectTo","useResetPassword","createResetPasswordMachine","isSent","resetPasswordPromise","useSendVerificationEmail","createSendVerificationEmailMachine","sendVerificationEmailPromise","useSignInAnonymous","signInAnonymous","signInAnonymousPromise","useSignInEmailPassword","stateOtp","signInEmailPassword","signInEmailPasswordPromise","sendMfaOtp","valueOtp","signInMfaTotpPromise","accessToken","needsMfaOtp","mfa","useSignInEmailPasswordless","signInEmailPasswordless","signInEmailPasswordlessPromise","useSignInEmailSecurityKey","signInEmailSecurityKey","email","signInEmailSecurityKeyPromise","useSignInSmsPasswordless","_phoneNumber","setPhoneNumber","signInSmsPasswordless","phoneNumber","signInSmsPasswordlessPromise","sendOtp","args","signInSmsPasswordlessOtpPromise","needsOtp","useSignOut","stateAll","signOut","valueAll","signOutPromise","useSignUpEmailPassword","c","signUpEmailPassword","signUpEmailPasswordPromise","useSignUpEmailSecurityKeyEmail","hookOptions","signUpEmailSecurityKey","signUpEmailSecurityKeyPromise","useUserAvatarUrl","useAvatarUrl","useUserDefaultRole","useDefaultRole","useUserDisplayName","useDisplayName","useUserEmail","useEmail","useUserId","useUserIsAnonymous","useIsAnonymous","useUserLocale","useUserRoles"],"mappings":"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"}