{"version":3,"file":"index.esm.js","sources":["../../../node_modules/.pnpm/@simplewebauthn+browser@6.0.0/node_modules/@simplewebauthn/browser/dist/bundle/index.js","../src/constants.ts","../src/errors.ts","../src/hasura-auth.ts","../src/storage.ts","../src/utils.ts","../src/validators.ts","../src/machines/context.ts","../src/machines/change-email.ts","../src/machines/change-password.ts","../src/machines/enable-mfa.ts","../src/machines/reset-password.ts","../src/machines/send-verification-email.ts","../src/machines/index.ts","../src/client.ts","../src/cookie-client.ts","../src/promises/addSecurityKey.ts","../src/promises/changeEmail.ts","../src/promises/changePassword.ts","../src/promises/mfa.ts","../src/promises/resetPassword.ts","../src/promises/sendVerificationEmail.ts","../src/promises/signInAnonymous.ts","../src/promises/signInEmailPassword.ts","../src/promises/signInEmailPasswordless.ts","../src/promises/signInEmailSecurityKey.ts","../src/promises/signInMfaTotp.ts","../src/promises/signInSmsPasswordless.ts","../src/promises/signInSmsPasswordlessOtp.ts","../src/promises/signOut.ts","../src/promises/signUpEmailPassword.ts","../src/promises/signUpEmailSecurityKey.ts"],"sourcesContent":["/* [@simplewebauthn/browser@6.0.0] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError('User clicked cancel, or the registration ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort();\n        }\n        this.controller = new AbortController();\n        return this.controller.signal;\n    }\n    reset() {\n        this.controller = undefined;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    finally {\n        webauthnAbortService.reset();\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    const credentialJSON = {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n    if (typeof response.getTransports === 'function') {\n        credentialJSON.transports = response.getTransports();\n    }\n    return credentialJSON;\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    if (navigator.credentials.conditionalMediationSupported) {\n        return true;\n    }\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    var _a;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        if ((_a = publicKey.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) {\n            return new WebAuthnError('No available authenticator recognized any of the allowed credentials', 'NotAllowedError');\n        }\n        return new WebAuthnError('User clicked cancel, or the authentication ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    finally {\n        webauthnAbortService.reset();\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","export const NHOST_REFRESH_TOKEN_KEY = 'nhostRefreshToken'\nexport const NHOST_JWT_EXPIRES_AT_KEY = 'nhostRefreshTokenExpiresAt'\n\nexport const MIN_PASSWORD_LENGTH = 3\n\n/**\n * Minimum time in seconds between now and the JWT expiration time before the JWT is refreshed\n * For instance, if set to 60, the client will refresh the JWT one minute before it expires\n */\nexport const TOKEN_REFRESH_MARGIN = 300 // five minutes\n\n/** Number of seconds before retrying a token refresh after an error */\nexport const REFRESH_TOKEN_RETRY_INTERVAL = 5\n","export const NETWORK_ERROR_CODE = 0\nexport const OTHER_ERROR_CODE = 1\nexport const VALIDATION_ERROR_CODE = 10\nexport const STATE_ERROR_CODE = 20\n\nexport type ErrorPayload = {\n  error: string\n  status: number\n  message: string\n}\n\n/**\n * @internal\n * Adds a standard error payload to any JS Error, or convert a standard error payload into a JS Error.\n * Allows xstate to use `throw` instead of `Promise.reject` to propagate errors.\n * See https://github.com/statelyai/xstate/issues/3037\n */\nexport class CodifiedError extends Error {\n  error: ErrorPayload\n  constructor(original: Error | ErrorPayload) {\n    super(original.message)\n    Error.captureStackTrace(this, this.constructor)\n    if (original instanceof Error) {\n      this.name = original.name\n      this.error = {\n        error: original.name,\n        status: OTHER_ERROR_CODE,\n        message: original.message\n      }\n    } else {\n      this.name = original.error\n      this.error = original\n    }\n  }\n}\n\nexport type ValidationErrorPayload = ErrorPayload & { status: typeof VALIDATION_ERROR_CODE }\n\n// TODO share with hasura-auth\nexport const INVALID_EMAIL_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-email',\n  message: 'Email is incorrectly formatted'\n}\n\nexport const INVALID_MFA_TYPE_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-type',\n  message: 'MFA type is invalid'\n}\n\nexport const INVALID_MFA_CODE_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-code',\n  message: 'MFA code is invalid'\n}\n\nexport const INVALID_PASSWORD_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-password',\n  message: 'Password is incorrectly formatted'\n}\n\nexport const INVALID_PHONE_NUMBER_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-phone-number',\n  message: 'Phone number is incorrectly formatted'\n}\n\nexport const INVALID_MFA_TICKET_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-ticket',\n  message: 'MFA ticket is invalid'\n}\n\nexport const NO_MFA_TICKET_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'no-mfa-ticket',\n  message: 'No MFA ticket has been provided'\n}\n\nexport const NO_REFRESH_TOKEN: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'no-refresh-token',\n  message: 'No refresh token has been provided'\n}\n\nexport const TOKEN_REFRESHER_RUNNING_ERROR: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'refresher-already-running',\n  message:\n    'The token refresher is already running. You must wait until is has finished before submitting a new token.'\n}\n\nexport const USER_ALREADY_SIGNED_IN: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'already-signed-in',\n  message: 'User is already signed in'\n}\n\nexport const USER_UNAUTHENTICATED: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'unauthenticated-user',\n  message: 'User is not authenticated'\n}\n\nexport const USER_NOT_ANONYMOUS: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'user-not-anonymous',\n  message: 'User is not anonymous'\n}\n\nexport const EMAIL_NEEDS_VERIFICATION: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'unverified-user',\n  message: 'Email needs verification'\n}\n\nexport const INVALID_REFRESH_TOKEN = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-refresh-token',\n  message: 'Invalid or expired refresh token'\n}\n\nexport const INVALID_SIGN_IN_METHOD = {\n  status: OTHER_ERROR_CODE,\n  error: 'invalid-sign-in-method',\n  message: 'Invalid sign-in method'\n}\n","import axios, { AxiosError } from 'axios'\n\nimport { ErrorPayload, NETWORK_ERROR_CODE } from './errors'\n\nexport const nhostApiClient = (backendUrl: string) => {\n  const client = axios.create({ baseURL: backendUrl })\n\n  client.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError<{ message: string; error?: string; statusCode?: number }>) =>\n      Promise.reject<{ error: ErrorPayload }>({\n        error: {\n          message:\n            error.response?.data?.message ??\n            error.message ??\n            error.request.responseText ??\n            JSON.stringify(error),\n          status: error.response?.status ?? error.response?.data?.statusCode ?? NETWORK_ERROR_CODE,\n          error: error.response?.data?.error || error.request.statusText || 'network'\n        }\n      })\n  )\n  return client\n}\n","import Cookies from 'js-cookie'\n\nimport { ClientStorage, ClientStorageType } from './types'\nexport type StorageGetter = (key: string) => string | null | Promise<string | null>\nexport type StorageSetter = (key: string, value: string | null) => void | Promise<void>\n\nconst isBrowser = typeof window !== 'undefined'\n\nconst inMemoryLocalStorage: Map<string, string | null> = new Map()\n\nconst defaultClientStorageGetter: StorageGetter = (key) => {\n  if (isBrowser && typeof localStorage !== 'undefined') return localStorage.getItem(key)\n  else return inMemoryLocalStorage.get(key) ?? null\n}\n\nconst defaultClientStorageSetter: StorageSetter = (key, value) => {\n  if (isBrowser && typeof localStorage !== 'undefined') {\n    if (value) {\n      localStorage.setItem(key, value)\n    } else {\n      localStorage.removeItem(key)\n    }\n  } else {\n    if (value) {\n      inMemoryLocalStorage.set(key, value)\n    } else if (inMemoryLocalStorage.has(key)) {\n      inMemoryLocalStorage.delete(key)\n    }\n  }\n}\n\nexport const localStorageGetter = (\n  clientStorageType: ClientStorageType,\n  clientStorage?: ClientStorage\n): StorageGetter => {\n  if (clientStorageType === 'localStorage' || clientStorageType === 'web') {\n    return defaultClientStorageGetter\n  }\n  if (clientStorageType === 'cookie') {\n    return (key) => {\n      if (isBrowser) {\n        return Cookies.get(key) ?? null\n      } else {\n        return null\n      }\n    }\n  }\n  if (!clientStorage) {\n    throw Error(\n      `clientStorageType is set to '${clientStorageType}' but no clientStorage has been given`\n    )\n  }\n  if (clientStorageType === 'react-native') {\n    return (key) => clientStorage.getItem?.(key)\n  }\n  if (clientStorageType === 'capacitor') {\n    return (key) => clientStorage.get?.({ key })\n  }\n  if (clientStorageType === 'expo-secure-storage') {\n    return (key) => clientStorage.getItemAsync?.(key)\n  }\n  if (clientStorageType === 'custom') {\n    if (clientStorage.getItem && clientStorage.removeItem) {\n      return clientStorage.getItem\n    }\n    if (clientStorage.getItemAsync) {\n      return clientStorage.getItemAsync\n    }\n    throw Error(\n      `clientStorageType is set to 'custom' but clientStorage is missing either \"getItem\" and \"removeItem\" properties or \"getItemAsync\" property`\n    )\n  }\n  throw Error(`Unknown storage type: ${clientStorageType}`)\n}\n\nexport const localStorageSetter = (\n  clientStorageType: ClientStorageType,\n  clientStorage?: ClientStorage\n): StorageSetter => {\n  if (clientStorageType === 'localStorage' || clientStorageType === 'web') {\n    return defaultClientStorageSetter\n  }\n  if (clientStorageType === 'cookie') {\n    return (key, value) => {\n      if (isBrowser) {\n        if (value) {\n          // TODO: Set expires based on the actual refresh token expire time\n          // For now, we're using 30 days so the cookie is not removed when the browser is closed because if `expiers` is omitted, the cookie becomes a session cookie.\n          Cookies.set(key, value, { expires: 30, sameSite: 'lax', httpOnly: false })\n        } else {\n          Cookies.remove(key)\n        }\n      }\n    }\n  }\n  if (!clientStorage) {\n    throw Error(\n      `clientStorageType is set to '${clientStorageType}' but no clienStorage has been given`\n    )\n  }\n  if (clientStorageType === 'react-native') {\n    return (key, value) =>\n      value ? clientStorage.setItem?.(key, value) : clientStorage.removeItem?.(key)\n  }\n  if (clientStorageType === 'capacitor') {\n    return (key, value) =>\n      value ? clientStorage.set?.({ key, value }) : clientStorage.remove?.({ key })\n  }\n  if (clientStorageType === 'expo-secure-storage') {\n    return async (key, value) =>\n      value ? clientStorage.setItemAsync?.(key, value) : clientStorage.deleteItemAsync?.(key)\n  }\n  if (clientStorageType === 'custom') {\n    if (!clientStorage.removeItem) {\n      throw Error(\n        `clientStorageType is set to 'custom' but clientStorage is missing a removeItem property`\n      )\n    }\n    if (clientStorage.setItem) {\n      return (key, value) =>\n        value ? clientStorage.setItem?.(key, value) : clientStorage.removeItem?.(key)\n    }\n    if (clientStorage.setItemAsync) {\n      return async (key, value) =>\n        value ? clientStorage.setItemAsync?.(key, value) : clientStorage.removeItem?.(key)\n    }\n    throw Error(\n      `clientStorageType is set to 'custom' but clientStorage is missing setItem or setItemAsync property`\n    )\n  }\n  throw Error(`Unknown storage type: ${clientStorageType}`)\n}\n","import { RedirectOption } from './types'\n\nexport const encodeQueryParameters = (baseUrl: string, parameters?: Record<string, unknown>) => {\n  const encodedParameters =\n    parameters &&\n    Object.entries(parameters)\n      .map(([key, value]) => {\n        const stringValue = Array.isArray(value)\n          ? value.join(',')\n          : typeof value === 'object'\n          ? JSON.stringify(value)\n          : (value as string)\n        return `${key}=${encodeURIComponent(stringValue)}`\n      })\n      .join('&')\n  if (encodedParameters) return `${baseUrl}?${encodedParameters}`\n  else return baseUrl\n}\n\n/**\n * Transform options that include a redirectTo property so the\n * redirect url is absolute, given a base clientUrl.\n * If no client url is given, any relative redirectUrl is removed while\n * the other options are sent as-is.\n * @param clientUrl base client url\n * @param options\n * @returns\n */\nexport const rewriteRedirectTo = <T extends RedirectOption>(\n  clientUrl?: string,\n  options?: T\n): (Omit<T, 'redirectTo'> & { redirectTo?: string }) | undefined => {\n  if (!options?.redirectTo) {\n    return options\n  }\n  const { redirectTo, ...otherOptions } = options\n  // * If the clientUrl is not defined, we can't rewrite the redirectTo\n  if (!clientUrl) {\n    // * If redirectTo is a relative path, we therefore pull it out of the options\n    if (redirectTo.startsWith('/')) {\n      return otherOptions\n    } else {\n      return options\n    }\n  }\n  const baseClientUrl = new URL(clientUrl)\n  const clientParams = Object.fromEntries(new URLSearchParams(baseClientUrl.search))\n  const url = new URL(redirectTo.startsWith('/') ? baseClientUrl.origin + redirectTo : redirectTo)\n  const additionalParams = new URLSearchParams(url.search)\n  let combinedParams = Object.fromEntries(additionalParams)\n\n  if (redirectTo.startsWith('/')) {\n    combinedParams = { ...clientParams, ...combinedParams }\n  }\n  let pathName = baseClientUrl.pathname\n  if (url.pathname.length > 1) {\n    pathName += url.pathname.slice(1)\n  }\n  return {\n    ...otherOptions,\n    redirectTo: encodeQueryParameters(url.origin + pathName, combinedParams)\n  }\n}\n\nexport function getParameterByName(name: string, url?: string) {\n  if (!url) {\n    if (typeof window === 'undefined') {\n      return\n    }\n    url = window.location?.href || ''\n  }\n  // eslint-disable-next-line no-useless-escape\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\nexport function removeParameterFromWindow(name: string) {\n  if (typeof window === 'undefined') {\n    return\n  }\n  const location = window?.location\n  if (!location) {\n    return\n  }\n  if (location) {\n    const search = new URLSearchParams(location.search)\n    const hash = new URLSearchParams(location.hash?.slice(1))\n    search.delete(name)\n    hash.delete(name)\n    let url = window.location.pathname\n    if (Array.from(search).length) url += `?${search.toString()}`\n    if (Array.from(hash).length) url += `#${hash.toString()}`\n    window.history.pushState({}, '', url)\n  }\n}\n","import { MIN_PASSWORD_LENGTH } from './constants'\n\nexport const isValidEmail = (email?: string | null) =>\n  !!email &&\n  typeof email === 'string' &&\n  !!String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    )\n\nexport const isValidPassword = (password?: string | null) =>\n  !!password && typeof password === 'string' && password.length >= MIN_PASSWORD_LENGTH\n\n// TODO improve validation\nexport const isValidPhoneNumber = (phoneNumber?: string | null) =>\n  !!phoneNumber && typeof phoneNumber === 'string'\n\nexport const isValidTicket = (ticket?: string | null) =>\n  ticket &&\n  typeof ticket === 'string' &&\n  ticket.match(/^mfaTotp:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)\n","import type { ErrorPayload } from '../errors'\nimport { User } from '../types'\n\nexport type StateErrorTypes = 'registration' | 'authentication' | 'signout'\n\nexport type AuthContext = {\n  user: User | null\n  mfa: {\n    ticket: string\n  } | null\n  accessToken: {\n    value: string | null\n    expiresAt: Date | null\n  }\n  refreshTimer: {\n    startedAt: Date | null\n    attempts: number\n    lastAttempt: Date | null\n  }\n  refreshToken: {\n    value: string | null\n  }\n  /** Number of times the user tried to get an access token from a refresh token but got a network error */\n  importTokenAttempts: number\n  errors: Partial<Record<StateErrorTypes, ErrorPayload>>\n}\n\nexport const INITIAL_MACHINE_CONTEXT: AuthContext = {\n  user: null,\n  mfa: null,\n  accessToken: {\n    value: null,\n    expiresAt: null\n  },\n  refreshTimer: {\n    startedAt: null,\n    attempts: 0,\n    lastAttempt: null\n  },\n  refreshToken: {\n    value: null\n  },\n  importTokenAttempts: 0,\n  errors: {}\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ChangeEmailOptions, ChangeEmailResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type ChangeEmailContext = {\n  error: ErrorPayload | null\n}\n\nexport type ChangeEmailEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: ChangeEmailOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ChangeEmailServices = {\n  request: { data: ChangeEmailResponse }\n}\n\nexport type ChangeEmailMachine = ReturnType<typeof createChangeEmailMachine>\n\nexport const createChangeEmailMachine = ({ backendUrl, clientUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ChangeEmailContext,\n        events: {} as ChangeEmailEvents,\n        services: {} as ChangeEmailServices\n      },\n      tsTypes: {} as import('./change-email.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changeEmail',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        // TODO change email in the main machine (context.user.email)\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        requestChange: async (_, { email, options }) => {\n          const res = await api.post(\n            '/user/email/change',\n            {\n              newEmail: email,\n              options: rewriteRedirectTo(clientUrl, options)\n            },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n              }\n            }\n          )\n          return res.data\n        }\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_PASSWORD_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ChangePasswordResponse } from '../types'\nimport { isValidPassword } from '../validators'\n\nexport type ChangePasswordContext = {\n  error: ErrorPayload | null\n}\nexport type ChangePasswordEvents =\n  | {\n      type: 'REQUEST'\n      password?: string\n      ticket?: string\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ChangePasswordServices = {\n  requestChange: { data: ChangePasswordResponse }\n}\n\nexport type ChangePasswordMachine = ReturnType<typeof createChangePasswordMachine>\n\nexport const createChangePasswordMachine = ({ backendUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ChangePasswordContext,\n        events: {} as ChangePasswordEvents,\n        services: {} as ChangePasswordServices\n      },\n      tsTypes: {} as import('./change-password.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changePassword',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidPassword',\n                actions: 'saveInvalidPasswordError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidPasswordError: assign({ error: (_) => INVALID_PASSWORD_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidPassword: (_, { password }) => !isValidPassword(password)\n      },\n      services: {\n        requestChange: (_, { password, ticket }) =>\n          api.post<string, ChangePasswordResponse>(\n            '/user/password',\n            { newPassword: password, ticket: ticket },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n              }\n            }\n          )\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_MFA_CODE_ERROR, INVALID_MFA_TYPE_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\n\nexport type EnableMfaContext = {\n  error: ErrorPayload | null\n  imageUrl: string | null\n  secret: string | null\n}\n\nexport type EnableMfaEvents =\n  | {\n      type: 'GENERATE'\n    }\n  | {\n      type: 'ACTIVATE'\n      code?: string\n      activeMfaType: 'totp'\n    }\n  | { type: 'GENERATED' }\n  | { type: 'GENERATED_ERROR'; error: ErrorPayload | null }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type EnableMfadMachine = ReturnType<typeof createEnableMfaMachine>\n\nexport const createEnableMfaMachine = ({ backendUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as EnableMfaContext,\n        events: {} as EnableMfaEvents\n      },\n      tsTypes: {} as import('./enable-mfa.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'enableMfa',\n      initial: 'idle',\n      context: { error: null, imageUrl: null, secret: null },\n      states: {\n        idle: {\n          initial: 'initial',\n          on: {\n            GENERATE: 'generating'\n          },\n          states: {\n            initial: {},\n            error: {}\n          }\n        },\n        generating: {\n          invoke: {\n            src: 'generate',\n            id: 'generate',\n            onDone: { target: 'generated', actions: ['reportGeneratedSuccess', 'saveGeneration'] },\n            onError: { actions: ['saveError', 'reportGeneratedError'], target: 'idle.error' }\n          }\n        },\n        generated: {\n          initial: 'idle',\n          states: {\n            idle: {\n              initial: 'idle',\n              on: {\n                ACTIVATE: [\n                  {\n                    cond: 'invalidMfaType',\n                    actions: 'saveInvalidMfaTypeError',\n                    target: '.error'\n                  },\n                  {\n                    cond: 'invalidMfaCode',\n                    actions: 'saveInvalidMfaCodeError',\n                    target: '.error'\n                  },\n                  {\n                    target: 'activating'\n                  }\n                ]\n              },\n              states: { idle: {}, error: {} }\n            },\n            activating: {\n              invoke: {\n                src: 'activate',\n                id: 'activate',\n                onDone: { target: 'activated', actions: 'reportSuccess' },\n                onError: { actions: ['saveError', 'reportError'], target: 'idle.error' }\n              }\n            },\n            activated: { type: 'final' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidMfaTypeError: assign({ error: (_) => INVALID_MFA_TYPE_ERROR }),\n        saveInvalidMfaCodeError: assign({ error: (_) => INVALID_MFA_CODE_ERROR }),\n        saveError: assign({\n          error: (_, { data: { error } }: any) => error\n        }),\n        saveGeneration: assign({\n          imageUrl: (_, { data: { imageUrl } }: any) => imageUrl,\n          secret: (_, { data: { totpSecret } }: any) => totpSecret\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS'),\n        reportGeneratedSuccess: send('GENERATED'),\n        reportGeneratedError: send((ctx) => ({ type: 'GENERATED_ERROR', error: ctx.error }))\n      },\n      guards: {\n        invalidMfaCode: (_, { code }) => !code,\n        invalidMfaType: (_, { activeMfaType }) => !activeMfaType || activeMfaType !== 'totp'\n      },\n      services: {\n        generate: async (_) => {\n          const { data } = await api.get('/mfa/totp/generate', {\n            headers: {\n              authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n            }\n          })\n          return data\n        },\n        activate: (_, { code, activeMfaType }) =>\n          api.post(\n            '/user/mfa',\n            {\n              code,\n              activeMfaType\n            },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n              }\n            }\n          )\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ResetPasswordOptions, ResetPasswordResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type ResetPasswordContext = {\n  error: ErrorPayload | null\n}\nexport type ResetPasswordEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: ResetPasswordOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ResetPasswordServices = {\n  requestChange: { data: ResetPasswordResponse }\n}\n\nexport type ResetPasswordMachine = ReturnType<typeof createResetPasswordMachine>\n\nexport const createResetPasswordMachine = ({ backendUrl, clientUrl }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ResetPasswordContext,\n        events: {} as ResetPasswordEvents,\n        services: {} as ResetPasswordServices\n      },\n      tsTypes: {} as import('./reset-password.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changePassword',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        requestChange: (_, { email, options }) =>\n          api.post<string, ResetPasswordResponse>('/user/password/reset', {\n            email,\n            options: rewriteRedirectTo(clientUrl, options)\n          })\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { SendVerificationEmailOptions, SendVerificationEmailResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type SendVerificationEmailContext = {\n  error: ErrorPayload | null\n}\n\nexport type SendVerificationEmailEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: SendVerificationEmailOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type SendVerificationEmailServices = {\n  request: { data: SendVerificationEmailResponse }\n}\n\nexport type SendVerificationEmailMachine = ReturnType<typeof createSendVerificationEmailMachine>\nexport const createSendVerificationEmailMachine = ({ backendUrl, clientUrl }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as SendVerificationEmailContext,\n        events: {} as SendVerificationEmailEvents,\n        services: {} as SendVerificationEmailServices\n      },\n      tsTypes: {} as import('./send-verification-email.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'sendVerificationEmail',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'request',\n            id: 'request',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        request: async (_, { email, options }) => {\n          const res = await api.post<SendVerificationEmailResponse>(\n            '/user/email/send-verification-email',\n            {\n              email,\n              options: rewriteRedirectTo(clientUrl, options)\n            }\n          )\n          return res.data\n        }\n      }\n    }\n  )\n}\n","import type { AxiosRequestConfig } from 'axios'\nimport { assign, createMachine, send } from 'xstate'\n\nimport { startAuthentication, startRegistration } from '@simplewebauthn/browser'\nimport type {\n  AuthenticationCredentialJSON,\n  PublicKeyCredentialCreationOptionsJSON,\n  PublicKeyCredentialRequestOptionsJSON,\n  RegistrationCredentialJSON\n} from '@simplewebauthn/typescript-types'\n\nimport {\n  NHOST_JWT_EXPIRES_AT_KEY,\n  NHOST_REFRESH_TOKEN_KEY,\n  REFRESH_TOKEN_RETRY_INTERVAL,\n  TOKEN_REFRESH_MARGIN\n} from '../constants'\nimport {\n  CodifiedError,\n  ErrorPayload,\n  INVALID_EMAIL_ERROR,\n  INVALID_MFA_TICKET_ERROR,\n  INVALID_PASSWORD_ERROR,\n  INVALID_PHONE_NUMBER_ERROR,\n  NETWORK_ERROR_CODE,\n  NO_MFA_TICKET_ERROR,\n  VALIDATION_ERROR_CODE\n} from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { localStorageGetter, localStorageSetter } from '../storage'\nimport {\n  AuthOptions,\n  DeanonymizeResponse,\n  NhostSession,\n  NhostSessionResponse,\n  PasswordlessEmailResponse,\n  PasswordlessSmsOtpResponse,\n  PasswordlessSmsResponse,\n  RefreshSessionResponse,\n  SignInAnonymousResponse,\n  SignInMfaTotpResponse,\n  SignInResponse,\n  SignOutResponse,\n  SignUpResponse\n} from '../types'\nimport { getParameterByName, removeParameterFromWindow, rewriteRedirectTo } from '../utils'\nimport { isValidEmail, isValidPassword, isValidPhoneNumber, isValidTicket } from '../validators'\n\nimport { AuthContext, INITIAL_MACHINE_CONTEXT, StateErrorTypes } from './context'\nimport { AuthEvents } from './events'\n\nexport * from './change-email'\nexport * from './change-password'\nexport * from './enable-mfa'\nexport * from './reset-password'\nexport * from './send-verification-email'\nexport type { AuthContext, AuthEvents, StateErrorTypes }\n\nexport interface AuthMachineOptions extends AuthOptions {\n  backendUrl: string\n  clientUrl: string\n}\n\nexport type AuthMachine = ReturnType<typeof createAuthMachine>\n\ntype AuthServices = {\n  signInPassword: { data: SignInResponse }\n  passwordlessSms: { data: PasswordlessSmsResponse | DeanonymizeResponse }\n  passwordlessSmsOtp: { data: PasswordlessSmsOtpResponse }\n  passwordlessEmail: { data: PasswordlessEmailResponse | DeanonymizeResponse }\n  signInAnonymous: { data: SignInAnonymousResponse }\n  signInMfaTotp: { data: SignInMfaTotpResponse }\n  signInSecurityKeyEmail: { data: SignInResponse }\n  refreshToken: { data: NhostSessionResponse }\n  signout: { data: SignOutResponse }\n  signUpEmailPassword: { data: SignUpResponse }\n  signUpSecurityKey: { data: SignUpResponse }\n  importRefreshToken: { data: NhostSessionResponse }\n}\n\nexport const createAuthMachine = ({\n  backendUrl,\n  clientUrl,\n  clientStorageGetter,\n  clientStorageSetter,\n  clientStorageType = 'web',\n  clientStorage,\n  refreshIntervalTime,\n  autoRefreshToken = true,\n  autoSignIn = true\n}: AuthMachineOptions) => {\n  const storageGetter = clientStorageGetter || localStorageGetter(clientStorageType, clientStorage)\n  const storageSetter = clientStorageSetter || localStorageSetter(clientStorageType, clientStorage)\n  const api = nhostApiClient(backendUrl)\n  const postRequest = async <T = any, D = any>(\n    url: string,\n    data?: D,\n    config?: AxiosRequestConfig<D>\n  ): Promise<T> => {\n    const result = await api.post(url, data, config)\n\n    return result.data\n  }\n  return createMachine(\n    {\n      schema: {\n        context: {} as AuthContext,\n        events: {} as AuthEvents,\n        services: {} as AuthServices\n      },\n      tsTypes: {} as import('./index.typegen').Typegen0,\n      context: INITIAL_MACHINE_CONTEXT,\n      predictableActionArguments: true,\n      id: 'nhost',\n      type: 'parallel',\n      states: {\n        authentication: {\n          initial: 'starting',\n          on: {\n            SESSION_UPDATE: [\n              {\n                cond: 'hasSession',\n                actions: ['saveSession', 'resetTimer', 'reportTokenChanged'],\n                target: '.signedIn'\n              }\n            ]\n          },\n          states: {\n            starting: {\n              tags: ['loading'],\n              always: { cond: 'isSignedIn', target: 'signedIn' },\n              invoke: {\n                id: 'importRefreshToken',\n                src: 'importRefreshToken',\n                onDone: [\n                  {\n                    cond: 'hasSession',\n                    actions: ['saveSession', 'reportTokenChanged'],\n                    target: 'signedIn'\n                  },\n                  {\n                    target: 'signedOut'\n                  }\n                ],\n                onError: [\n                  {\n                    cond: 'shouldRetryImportToken',\n                    actions: 'incrementTokenImportAttempts',\n                    target: 'retryTokenImport'\n                  },\n                  { actions: ['saveAuthenticationError'], target: 'signedOut' }\n                ]\n              }\n            },\n            retryTokenImport: {\n              tags: ['loading'],\n              after: {\n                RETRY_IMPORT_TOKEN_DELAY: 'starting'\n              }\n            },\n            signedOut: {\n              initial: 'noErrors',\n              entry: 'reportSignedOut',\n              states: {\n                noErrors: {},\n                success: {},\n                needsSmsOtp: {},\n                needsMfa: {},\n                failed: {},\n                signingOut: {\n                  entry: ['clearContextExceptRefreshToken'],\n                  exit: ['destroyRefreshToken', 'reportTokenChanged'],\n                  invoke: {\n                    src: 'signout',\n                    id: 'signingOut',\n                    onDone: {\n                      target: 'success'\n                    },\n                    onError: {\n                      target: 'failed',\n                      actions: ['saveAuthenticationError']\n                    }\n                  }\n                }\n              },\n              on: {\n                SIGNIN_PASSWORD: 'authenticating.password',\n                SIGNIN_ANONYMOUS: 'authenticating.anonymous',\n                SIGNIN_SECURITY_KEY_EMAIL: 'authenticating.securityKeyEmail',\n                SIGNIN_MFA_TOTP: 'authenticating.mfa.totp'\n              }\n            },\n            authenticating: {\n              entry: 'resetErrors',\n              states: {\n                password: {\n                  invoke: {\n                    src: 'signInPassword',\n                    id: 'authenticateUserWithPassword',\n                    onDone: [\n                      {\n                        cond: 'hasMfaTicket',\n                        actions: ['saveMfaTicket'],\n                        target: '#nhost.authentication.signedOut.needsMfa'\n                      },\n                      {\n                        actions: ['saveSession', 'reportTokenChanged'],\n                        target: '#nhost.authentication.signedIn'\n                      }\n                    ],\n                    onError: [\n                      {\n                        cond: 'unverified',\n                        target: [\n                          '#nhost.authentication.signedOut',\n                          '#nhost.registration.incomplete.needsEmailVerification'\n                        ]\n                      },\n                      {\n                        actions: 'saveAuthenticationError',\n                        target: '#nhost.authentication.signedOut.failed'\n                      }\n                    ]\n                  }\n                },\n                anonymous: {\n                  invoke: {\n                    src: 'signInAnonymous',\n                    id: 'authenticateAnonymously',\n                    onDone: {\n                      actions: ['saveSession', 'reportTokenChanged'],\n                      target: '#nhost.authentication.signedIn'\n                    },\n                    onError: {\n                      actions: 'saveAuthenticationError',\n                      target: '#nhost.authentication.signedOut.failed'\n                    }\n                  }\n                },\n                mfa: {\n                  states: {\n                    totp: {\n                      invoke: {\n                        src: 'signInMfaTotp',\n                        id: 'signInMfaTotp',\n                        onDone: {\n                          actions: ['saveSession', 'reportTokenChanged'],\n                          target: '#nhost.authentication.signedIn'\n                        },\n                        onError: {\n                          actions: ['saveAuthenticationError'],\n                          target: '#nhost.authentication.signedOut.failed'\n                        }\n                      }\n                    }\n                  }\n                },\n                securityKeyEmail: {\n                  invoke: {\n                    src: 'signInSecurityKeyEmail',\n                    id: 'authenticateUserWithSecurityKey',\n                    onDone: {\n                      actions: ['saveSession', 'reportTokenChanged'],\n                      target: '#nhost.authentication.signedIn'\n                    },\n                    onError: [\n                      {\n                        cond: 'unverified',\n                        target: [\n                          '#nhost.authentication.signedOut',\n                          '#nhost.registration.incomplete.needsEmailVerification'\n                        ]\n                      },\n                      {\n                        actions: 'saveAuthenticationError',\n                        target: '#nhost.authentication.signedOut.failed'\n                      }\n                    ]\n                  }\n                }\n              }\n            },\n            signedIn: {\n              type: 'parallel',\n              entry: ['reportSignedIn', 'cleanUrl', 'broadcastToken', 'resetErrors'],\n              on: {\n                SIGNOUT: 'signedOut.signingOut'\n              },\n              states: {\n                refreshTimer: {\n                  id: 'timer',\n                  initial: 'idle',\n                  states: {\n                    disabled: { type: 'final' },\n                    stopped: {\n                      always: {\n                        cond: 'noToken',\n                        target: 'idle'\n                      }\n                    },\n                    idle: {\n                      always: [\n                        { cond: 'isAutoRefreshDisabled', target: 'disabled' },\n                        {\n                          cond: 'hasRefreshToken',\n                          target: 'running'\n                        }\n                      ]\n                    },\n                    running: {\n                      initial: 'pending',\n                      entry: 'resetTimer',\n                      states: {\n                        pending: {\n                          after: {\n                            '1000': {\n                              internal: false,\n                              target: 'pending'\n                            }\n                          },\n                          always: {\n                            cond: 'refreshTimerShouldRefresh',\n                            target: 'refreshing'\n                          }\n                        },\n                        refreshing: {\n                          invoke: {\n                            src: 'refreshToken',\n                            id: 'refreshToken',\n                            onDone: {\n                              actions: ['saveSession', 'resetTimer', 'reportTokenChanged'],\n                              target: 'pending'\n                            },\n                            onError: [\n                              { actions: 'saveRefreshAttempt', target: 'pending' }\n                              // ? stop trying after x attempts?\n                              // {\n                              //   actions: 'retry',\n                              //   cond: 'canRetry',\n                              //   target: 'pending'\n                              // },\n                              // {\n                              //   actions: ['sendError', 'resetToken'],\n                              //   target: '#timer.stopped'\n                              // }\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        token: {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                TRY_TOKEN: 'running'\n              },\n              initial: 'noErrors',\n              states: { noErrors: {}, error: {} }\n            },\n            running: {\n              invoke: {\n                src: 'refreshToken',\n                id: 'authenticateWithToken',\n                onDone: {\n                  actions: ['saveSession', 'reportTokenChanged'],\n                  target: ['#nhost.authentication.signedIn', 'idle.noErrors']\n                },\n                onError: [\n                  { cond: 'isSignedIn', target: 'idle.error' },\n                  {\n                    actions: 'saveAuthenticationError',\n                    target: ['#nhost.authentication.signedOut.failed', 'idle.error']\n                  }\n                ]\n              }\n            }\n          }\n        },\n        registration: {\n          initial: 'incomplete',\n          on: {\n            SIGNED_IN: [{ cond: 'isAnonymous', target: '.incomplete' }, '.complete']\n          },\n          states: {\n            incomplete: {\n              on: {\n                SIGNUP_EMAIL_PASSWORD: 'emailPassword',\n                SIGNUP_SECURITY_KEY: 'securityKey',\n                PASSWORDLESS_EMAIL: 'passwordlessEmail',\n                PASSWORDLESS_SMS: 'passwordlessSms',\n                PASSWORDLESS_SMS_OTP: 'passwordlessSmsOtp'\n              },\n              initial: 'noErrors',\n              states: {\n                noErrors: {},\n                needsEmailVerification: {},\n                needsOtp: {},\n                failed: {}\n              }\n            },\n            emailPassword: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'signUpEmailPassword',\n                id: 'signUpEmailPassword',\n                onDone: [\n                  {\n                    cond: 'hasSession',\n                    actions: ['saveSession', 'reportTokenChanged'],\n                    target: '#nhost.authentication.signedIn'\n                  },\n                  {\n                    actions: 'clearContext',\n                    target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                  }\n                ],\n                onError: [\n                  {\n                    cond: 'unverified',\n                    target: 'incomplete.needsEmailVerification'\n                  },\n                  {\n                    actions: 'saveRegistrationError',\n                    target: 'incomplete.failed'\n                  }\n                ]\n              }\n            },\n            securityKey: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'signUpSecurityKey',\n                id: 'signUpSecurityKey',\n                onDone: [\n                  {\n                    cond: 'hasSession',\n                    actions: ['saveSession', 'reportTokenChanged'],\n                    target: '#nhost.authentication.signedIn'\n                  },\n                  {\n                    actions: 'clearContext',\n                    target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                  }\n                ],\n                onError: [\n                  {\n                    cond: 'unverified',\n                    target: 'incomplete.needsEmailVerification'\n                  },\n                  {\n                    actions: 'saveRegistrationError',\n                    target: 'incomplete.failed'\n                  }\n                ]\n              }\n            },\n            passwordlessEmail: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessEmail',\n                id: 'passwordlessEmail',\n                onDone: {\n                  actions: 'clearContext',\n                  target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n            passwordlessSms: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessSms',\n                id: 'passwordlessSms',\n                onDone: {\n                  actions: 'clearContext',\n                  target: ['#nhost.authentication.signedOut', 'incomplete.needsOtp']\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n            passwordlessSmsOtp: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessSmsOtp',\n                id: 'passwordlessSmsOtp',\n                onDone: {\n                  actions: ['saveSession', 'reportTokenChanged'],\n                  target: '#nhost.authentication.signedIn'\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n\n            complete: {\n              on: {\n                SIGNED_OUT: 'incomplete'\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        reportSignedIn: send('SIGNED_IN'),\n        reportSignedOut: send('SIGNED_OUT'),\n        reportTokenChanged: send('TOKEN_CHANGED'),\n        incrementTokenImportAttempts: assign({\n          importTokenAttempts: ({ importTokenAttempts }) => importTokenAttempts + 1\n        }),\n        clearContext: assign(() => {\n          storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n          storageSetter(NHOST_REFRESH_TOKEN_KEY, null)\n          return {\n            ...INITIAL_MACHINE_CONTEXT\n          }\n        }),\n        clearContextExceptRefreshToken: assign(({ refreshToken: { value } }) => {\n          storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n          return {\n            ...INITIAL_MACHINE_CONTEXT,\n            refreshToken: { value }\n          }\n        }),\n\n        // * Save session in the context, and persist the refresh token and the jwt expiration outside of the machine\n        saveSession: assign({\n          user: (_, { data }) => data?.session?.user || null,\n          accessToken: (_, { data }) => {\n            if (data.session) {\n              const { accessTokenExpiresIn, accessToken } = data.session\n              const nextRefresh = new Date(Date.now() + accessTokenExpiresIn * 1_000)\n              storageSetter(NHOST_JWT_EXPIRES_AT_KEY, nextRefresh.toISOString())\n              return {\n                value: accessToken,\n                expiresAt: nextRefresh\n              }\n            }\n            storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n            return {\n              value: null,\n              expiresAt: null\n            }\n          },\n          refreshToken: (_, { data }) => {\n            const refreshToken = data.session?.refreshToken || null\n            if (refreshToken) {\n              storageSetter(NHOST_REFRESH_TOKEN_KEY, refreshToken)\n            }\n            return { value: refreshToken }\n          }\n        }),\n        saveMfaTicket: assign({\n          mfa: (_, e) => e.data?.mfa\n        }),\n\n        resetTimer: assign({\n          refreshTimer: (_) => ({\n            startedAt: new Date(),\n            attempts: 0,\n            lastAttempt: null\n          })\n        }),\n\n        saveRefreshAttempt: assign({\n          refreshTimer: (ctx, e) => ({\n            startedAt: ctx.refreshTimer.startedAt,\n            attempts: ctx.refreshTimer.attempts + 1,\n            lastAttempt: new Date()\n          })\n        }),\n\n        // * Authentication errors\n        saveAuthenticationError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          errors: ({ errors }, { data: { error } }: any) => ({\n            ...errors,\n            authentication: error\n          })\n        }),\n        resetErrors: assign({\n          errors: (_) => ({}),\n          importTokenAttempts: (_) => 0\n        }),\n        saveRegistrationError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          errors: ({ errors }, { data: { error } }: any) => ({ ...errors, registration: error })\n        }),\n        destroyRefreshToken: assign({\n          refreshToken: (_) => {\n            storageSetter(NHOST_REFRESH_TOKEN_KEY, null)\n            return { value: null }\n          }\n        }),\n\n        // * Clean the browser url when `autoSignIn` is activated\n        cleanUrl: () => {\n          if (autoSignIn && getParameterByName('refreshToken')) {\n            // * Remove the refresh token from the URL\n            removeParameterFromWindow('refreshToken')\n            removeParameterFromWindow('type')\n          }\n        },\n\n        // * Broadcast the token to other tabs when `autoSignIn` is activated\n        broadcastToken: (context) => {\n          if (autoSignIn) {\n            try {\n              const channel = new BroadcastChannel('nhost')\n              // ? broadcat session instead of token ?\n              channel.postMessage(context.refreshToken.value)\n            } catch (error) {\n              // * BroadcastChannel is not available e.g. react-native\n            }\n          }\n        }\n      },\n\n      guards: {\n        isAnonymous: (ctx, e) => !!ctx.user?.isAnonymous,\n        isSignedIn: (ctx) => !!ctx.user && !!ctx.refreshToken.value && !!ctx.accessToken.value,\n        noToken: (ctx) => !ctx.refreshToken.value,\n        hasRefreshToken: (ctx) => !!ctx.refreshToken.value,\n        isAutoRefreshDisabled: () => !autoRefreshToken,\n        refreshTimerShouldRefresh: (ctx) => {\n          const { expiresAt } = ctx.accessToken\n          if (!expiresAt) {\n            return false\n          }\n          if (ctx.refreshTimer.lastAttempt) {\n            // * If a refesh previously failed, only try to refresh every `REFRESH_TOKEN_RETRY_INTERVAL` seconds\n            const elapsed = Date.now() - ctx.refreshTimer.lastAttempt.getTime()\n            return elapsed > REFRESH_TOKEN_RETRY_INTERVAL * 1_000\n          }\n          if (refreshIntervalTime) {\n            // * If a refreshIntervalTime has been passed on as an option, it will notify\n            // * the token should be refershed when this interval is overdue\n            const elapsed = Date.now() - ctx.refreshTimer.startedAt!.getTime()\n            if (elapsed > refreshIntervalTime * 1_000) {\n              return true\n            }\n          }\n          // * In any case, it's time to refresh when there's less than\n          // * TOKEN_REFRESH_MARGIN seconds before the JWT exprires\n          const expiresIn = expiresAt.getTime() - Date.now()\n          const remaining = expiresIn - 1_000 * TOKEN_REFRESH_MARGIN\n          return remaining <= 0\n        },\n        // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n        /** Shoud retry to import the token on network error or any internal server error */\n        shouldRetryImportToken: (_, e: any) =>\n          e.data.error.status === NETWORK_ERROR_CODE || e.data.error.status >= 500,\n        // * Authentication errors\n        // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n        unverified: (_, { data: { error } }: any) =>\n          error.status === 401 &&\n          // * legacy: don't use the message contents to determine if the email is unverified, but the error type (error.error)\n          (error.message === 'Email is not verified' || error.error === 'unverified-user'),\n\n        // * Event guards\n        hasSession: (_, e) => !!e.data?.session,\n        hasMfaTicket: (_, e) => !!e.data?.mfa\n      },\n\n      services: {\n        signInPassword: (_, { email, password }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject({ error: INVALID_EMAIL_ERROR })\n          }\n          if (!isValidPassword(password)) {\n            return Promise.reject({ error: INVALID_PASSWORD_ERROR })\n          }\n          return postRequest<SignInResponse>('/signin/email-password', {\n            email,\n            password\n          })\n        },\n        passwordlessSms: (context, { phoneNumber, options }) => {\n          if (!isValidPhoneNumber(phoneNumber)) {\n            return Promise.reject({ error: INVALID_PHONE_NUMBER_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            // TODO implement in hasura-auth\n            // * See https://github.com/nhost/hasura-auth/blob/9c6d0f4ded4fc8fd1b8031926c02796c74a7eada/src/routes/user/deanonymize.ts\n            console.warn(\n              'Deanonymisation from a phone number is not yet implemented in hasura-auth'\n            )\n            return postRequest(\n              '/user/deanonymize',\n              {\n                signInMethod: 'passwordless',\n                connection: 'sms',\n                phoneNumber,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest('/signin/passwordless/sms', {\n              phoneNumber,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        passwordlessSmsOtp: (_, { phoneNumber, otp }) => {\n          if (!isValidPhoneNumber(phoneNumber)) {\n            return Promise.reject({ error: INVALID_PHONE_NUMBER_ERROR })\n          }\n          return postRequest('/signin/passwordless/sms/otp', {\n            phoneNumber,\n            otp\n          })\n        },\n        passwordlessEmail: (context, { email, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject({ error: INVALID_EMAIL_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            return postRequest(\n              '/user/deanonymize',\n              {\n                signInMethod: 'passwordless',\n                connection: 'email',\n                email,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest('/signin/passwordless/email', {\n              email,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        signInAnonymous: (_) => postRequest('/signin/anonymous'),\n        signInMfaTotp: (context, data) => {\n          const ticket: string | undefined = data.ticket || context.mfa?.ticket\n          if (!ticket) {\n            return Promise.reject({ error: NO_MFA_TICKET_ERROR })\n          }\n          if (!isValidTicket(ticket)) {\n            return Promise.reject({ error: INVALID_MFA_TICKET_ERROR })\n          }\n\n          return postRequest('/signin/mfa/totp', {\n            ticket,\n            otp: data.otp\n          })\n        },\n        signInSecurityKeyEmail: async (_, { email }) => {\n          if (!isValidEmail(email)) {\n            throw new CodifiedError(INVALID_EMAIL_ERROR)\n          }\n          const options = await postRequest<PublicKeyCredentialRequestOptionsJSON>(\n            '/signin/webauthn',\n            { email }\n          )\n          let credential: AuthenticationCredentialJSON\n          try {\n            credential = await startAuthentication(options)\n          } catch (e) {\n            throw new CodifiedError(e as Error)\n          }\n          return postRequest<SignInResponse>('/signin/webauthn/verify', { email, credential })\n        },\n        refreshToken: async (ctx, event) => {\n          const refreshToken = event.type === 'TRY_TOKEN' ? event.token : ctx.refreshToken.value\n          const session = await postRequest<RefreshSessionResponse>('/token', {\n            refreshToken\n          })\n          return { session, error: null }\n        },\n        signout: (ctx, e) =>\n          postRequest('/signout', {\n            refreshToken: ctx.refreshToken.value,\n            all: !!e.all\n          }),\n        signUpEmailPassword: async (context, { email, password, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_EMAIL_ERROR })\n          }\n          if (!isValidPassword(password)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_PASSWORD_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            return postRequest<SignUpResponse>(\n              '/user/deanonymize',\n              {\n                signInMethod: 'email-password',\n                email,\n                password,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest<SignUpResponse>('/signup/email-password', {\n              email,\n              password,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        signUpSecurityKey: async (_, { email, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_EMAIL_ERROR })\n          }\n          // TODO anonymous users\n          const nickname = options?.nickname\n          /*\n           * The `/signup/webauthn` endpoint accepts any option from SignUpOptions,\n           * We therefore remove the nickname from the options object before sending it to the server,\n           * as options if of type `SignUpSecurityKeyOptions`, which extends `SignUpOptions` with the optional `nickname` property.\n           */\n          if (nickname) delete options.nickname\n          const webAuthnOptions = await postRequest<PublicKeyCredentialCreationOptionsJSON>(\n            '/signup/webauthn',\n            { email, options }\n          )\n          let credential: RegistrationCredentialJSON\n          try {\n            credential = await startRegistration(webAuthnOptions)\n          } catch (e) {\n            throw new CodifiedError(e as Error)\n          }\n          return postRequest<SignUpResponse>('/signup/webauthn/verify', {\n            credential,\n            options: {\n              redirectTo: options?.redirectTo,\n              nickname\n            }\n          })\n        },\n        importRefreshToken: async () => {\n          let error: ErrorPayload | null = null\n          if (autoSignIn) {\n            const urlToken = getParameterByName('refreshToken') || null\n            if (urlToken) {\n              try {\n                const session = await postRequest<NhostSession>('/token', {\n                  refreshToken: urlToken\n                })\n                return { session, error: null }\n              } catch (exception) {\n                error = (exception as { error: ErrorPayload }).error\n              }\n            } else {\n              const error = getParameterByName('error')\n              if (error) {\n                return Promise.reject<NhostSessionResponse>({\n                  session: null,\n                  error: {\n                    status: VALIDATION_ERROR_CODE,\n                    error,\n                    message: getParameterByName('errorDescription') || error\n                  }\n                })\n              }\n            }\n          }\n          const storageToken = await storageGetter(NHOST_REFRESH_TOKEN_KEY)\n          if (storageToken) {\n            try {\n              const session = await postRequest<NhostSession>('/token', {\n                refreshToken: storageToken\n              })\n              return { session, error: null }\n            } catch (exception) {\n              error = (exception as { error: ErrorPayload }).error\n            }\n          }\n          if (error) {\n            return Promise.reject<NhostSessionResponse>({ error, session: null })\n          }\n          return { error: null, session: null }\n        }\n      },\n      delays: {\n        RETRY_IMPORT_TOKEN_DELAY: ({ importTokenAttempts }) => {\n          if (importTokenAttempts < 5) {\n            return 1000\n          }\n          return 5000\n        }\n      }\n    }\n  )\n}\n","import { interpret } from 'xstate'\n\nimport { AuthMachine, AuthMachineOptions, createAuthMachine } from './machines'\nimport type { AuthInterpreter } from './types'\n\nexport type NhostClientOptions = AuthMachineOptions & {\n  /** @internal create and start xstate interpreter on creation. With React, it is started inside the Nhost provider */\n  start?: boolean\n}\n\n/**\n * @internal\n * This is a private API.\n */\nexport class AuthClient {\n  readonly backendUrl: string\n  readonly clientUrl: string\n  readonly machine: AuthMachine\n  private _interpreter?: AuthInterpreter\n  private _channel?: BroadcastChannel\n  private _subscriptions: Set<(client: AuthClient) => void> = new Set()\n\n  constructor({\n    clientStorageType = 'web',\n    autoSignIn = true,\n    autoRefreshToken = true,\n    start = true,\n    backendUrl,\n    clientUrl,\n    devTools,\n    ...defaultOptions\n  }: NhostClientOptions) {\n    this.backendUrl = backendUrl\n    this.clientUrl = clientUrl\n\n    this.machine = createAuthMachine({\n      ...defaultOptions,\n      backendUrl,\n      clientUrl,\n      clientStorageType,\n      autoSignIn,\n      autoRefreshToken\n    })\n\n    if (start) {\n      this.interpreter = interpret(this.machine, { devTools })\n      this.interpreter.start()\n    }\n\n    if (typeof window !== 'undefined' && autoSignIn) {\n      try {\n        // TODO listen to sign out\n        // TODO the same refresh token is used and refreshed by all tabs\n        // * Ideally, a single tab should autorefresh and share the new jwt\n        this._channel = new BroadcastChannel('nhost')\n        this._channel.addEventListener('message', (token) => {\n          const existingToken = this.interpreter?.getSnapshot().context.refreshToken.value\n          if (this.interpreter && token.data !== existingToken) {\n            this.interpreter.send('TRY_TOKEN', { token: token.data })\n          }\n        })\n      } catch (error) {\n        // * BroadcastChannel is not available e.g. react-native\n      }\n    }\n  }\n\n  get interpreter(): AuthInterpreter | undefined {\n    return this._interpreter\n  }\n  set interpreter(interpreter: AuthInterpreter | undefined) {\n    this._interpreter = interpreter\n    if (interpreter) {\n      this._subscriptions.forEach((fn) => fn(this))\n    }\n  }\n\n  onStart(fn: (client: AuthClient) => void) {\n    if (this.interpreter) {\n      // * The interpreter is already available: we can add the listener straight ahead\n      fn(this)\n    } else {\n      // * The interpreter is not yet available: we add the listener to a queue that will be started when setting the interpreter\n      // * Note: in React, the Xstate interpreter does not start from the global state, but from the root component\n      this._subscriptions.add(fn)\n    }\n  }\n}\n","import { AuthClient, NhostClientOptions } from './client'\nconst isBrowser = typeof window !== 'undefined'\n\n/** @deprecated Not in use anymore. Use `clientStorageType: 'cookie'` instead */\nexport class AuthCookieClient extends AuthClient {\n  constructor({\n    ...options\n  }: Omit<\n    NhostClientOptions,\n    'clientStorageGetter' | 'clientStorageSetter' | 'clientStorage' | 'clientStorageType'\n  >) {\n    super({\n      ...options,\n      autoSignIn: isBrowser && options.autoSignIn,\n      autoRefreshToken: isBrowser && options.autoRefreshToken,\n      clientStorageType: 'cookie'\n    })\n  }\n}\n\n/** @deprecated Alias for {@link AuthCookieClient} */\nexport const AuthClientSSR = AuthCookieClient\n","import { startRegistration } from '@simplewebauthn/browser'\nimport {\n  PublicKeyCredentialCreationOptionsJSON,\n  RegistrationCredentialJSON\n} from '@simplewebauthn/typescript-types'\n\nimport { AuthClient } from '../client'\nimport { CodifiedError, ErrorPayload } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { SecurityKey } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\nexport interface AddSecurityKeyHandlerResult extends ActionErrorState, ActionSuccessState {\n  key?: SecurityKey\n}\n\nexport interface AddSecurityKeyState extends AddSecurityKeyHandlerResult, ActionLoadingState {}\n\nexport const addSecurityKeyPromise = async (\n  { backendUrl, interpreter }: AuthClient,\n  nickname?: string\n): Promise<AddSecurityKeyHandlerResult> => {\n  const api = nhostApiClient(backendUrl)\n  try {\n    const { data: options } = await api.post<PublicKeyCredentialCreationOptionsJSON>(\n      '/user/webauthn/add',\n      {},\n      {\n        headers: {\n          authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n        }\n      }\n    )\n    let credential: RegistrationCredentialJSON\n    try {\n      credential = await startRegistration(options)\n    } catch (e) {\n      throw new CodifiedError(e as Error)\n    }\n    const { data: key } = await api.post<SecurityKey>(\n      '/user/webauthn/verify',\n      { credential, nickname },\n      {\n        headers: {\n          authorization: `Bearer ${interpreter?.getSnapshot().context.accessToken.value}`\n        }\n      }\n    )\n    return { key, isError: false, error: null, isSuccess: true }\n  } catch (e) {\n    const { error } = e as { error: ErrorPayload }\n    return { isError: true, error, isSuccess: false }\n  }\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { ChangeEmailMachine } from '../machines'\nimport { ChangeEmailOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, NeedsEmailVerificationState } from './types'\nexport interface ChangeEmailHandlerResult extends ActionErrorState, NeedsEmailVerificationState {}\n\nexport interface ChangeEmailState extends ChangeEmailHandlerResult, ActionLoadingState {}\n\nexport const changeEmailPromise = async (\n  interpreter: InterpreterFrom<ChangeEmailMachine>,\n  email: string,\n  options?: ChangeEmailOptions\n): Promise<ChangeEmailHandlerResult> =>\n  new Promise<ChangeEmailHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((s) => {\n      if (s.matches({ idle: 'error' })) {\n        resolve({ error: s.context.error, isError: true, needsEmailVerification: false })\n      } else if (s.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, needsEmailVerification: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { ChangePasswordMachine } from '../machines'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface ChangePasswordState extends ChangePasswordHandlerResult, ActionLoadingState {}\n\nexport interface ChangePasswordHandlerResult extends ActionErrorState, ActionSuccessState {}\n\nexport const changePasswordPromise = async (\n  interpreter: InterpreterFrom<ChangePasswordMachine>,\n  password: string,\n  ticket?: string\n): Promise<ChangePasswordHandlerResult> =>\n  new Promise<ChangePasswordHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      password, ticket\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSuccess: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSuccess: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { EnableMfadMachine } from '../machines'\n\nimport { ActionErrorState } from './types'\n\nexport interface GenerateQrCodeHandlerResult extends ActionErrorState {\n  qrCodeDataUrl: string\n  isGenerated: boolean\n}\n\nexport interface GenerateQrCodeState extends GenerateQrCodeHandlerResult {\n  isGenerating: boolean\n}\nexport interface ActivateMfaHandlerResult extends ActionErrorState {\n  isActivated: boolean\n}\n\nexport interface ActivateMfaState extends ActivateMfaHandlerResult {\n  isActivating: boolean\n}\n\nexport const generateQrCodePromise = (service: InterpreterFrom<EnableMfadMachine>) =>\n  new Promise<GenerateQrCodeHandlerResult>((resolve) => {\n    service.send('GENERATE')\n    service.onTransition((state) => {\n      if (state.matches('generated')) {\n        resolve({\n          error: null,\n          isError: false,\n          isGenerated: true,\n          qrCodeDataUrl: state.context.imageUrl || ''\n        })\n      } else if (state.matches({ idle: 'error' })) {\n        resolve({\n          error: state.context.error || null,\n          isError: true,\n          isGenerated: false,\n          qrCodeDataUrl: ''\n        })\n      }\n    })\n  })\nexport const activateMfaPromise = (service: InterpreterFrom<EnableMfadMachine>, code: string) =>\n  new Promise<ActivateMfaHandlerResult>((resolve) => {\n    service.send('ACTIVATE', {\n      activeMfaType: 'totp',\n      code\n    })\n    service.onTransition((state) => {\n      if (state.matches({ generated: 'activated' })) {\n        resolve({ error: null, isActivated: true, isError: false })\n      } else if (state.matches({ generated: { idle: 'error' } })) {\n        resolve({ error: state.context.error, isActivated: false, isError: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { ResetPasswordMachine } from '../machines'\nimport { ResetPasswordOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState } from './types'\n\nexport interface ResetPasswordHandlerResult extends ActionErrorState {\n  /** Returns `true` when an email to reset the password has been sent */\n  isSent: boolean\n}\n\nexport interface ResetPasswordState extends ResetPasswordHandlerResult, ActionLoadingState {}\n\nexport const resetPasswordPromise = async (\n  interpreter: InterpreterFrom<ResetPasswordMachine>,\n  email: string,\n  options?: ResetPasswordOptions\n): Promise<ResetPasswordHandlerResult> =>\n  new Promise((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSent: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSent: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { SendVerificationEmailMachine } from '../machines'\nimport { SendVerificationEmailOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState } from './types'\n\nexport interface SendVerificationEmailHandlerResult extends ActionErrorState {\n  /** Returns `true` when a new verification email has been sent */\n  isSent: boolean\n}\n\nexport interface SendVerificationEmailState\n  extends ActionLoadingState,\n    SendVerificationEmailHandlerResult {}\n\nexport const sendVerificationEmailPromise = (\n  interpreter: InterpreterFrom<SendVerificationEmailMachine>,\n  email: string,\n  options?: SendVerificationEmailOptions\n): Promise<SendVerificationEmailHandlerResult> =>\n  new Promise<SendVerificationEmailHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSent: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSent: true })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInAnonymousHandlerResult extends SessionActionHandlerResult {}\nexport interface SignInAnonymousState extends SignInAnonymousHandlerResult, ActionLoadingState {}\n\nexport const signInAnonymousPromise = (\n  interpreter: AuthInterpreter\n): Promise<SignInAnonymousHandlerResult> =>\n  new Promise((resolve) => {\n    const { changed } = interpreter.send('SIGNIN_ANONYMOUS')\n    if (!changed) {\n      resolve({\n        isSuccess: false,\n        isError: true,\n        error: USER_ALREADY_SIGNED_IN,\n        user: null,\n        accessToken: null\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          isSuccess: true,\n          isError: false,\n          error: null,\n          user: state.context.user,\n          accessToken: state.context.accessToken.value\n        })\n      }\n      if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          isSuccess: false,\n          isError: true,\n          error: state.context.errors.authentication || null,\n          user: null,\n          accessToken: null\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignInEmailPasswordHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {\n  needsMfaOtp: boolean\n  mfa: {\n    ticket: string\n  } | null\n}\n\nexport interface SignInEmailPasswordState\n  extends SignInEmailPasswordHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailPasswordPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  password: string\n) =>\n  new Promise<SignInEmailPasswordHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNIN_PASSWORD', {\n      email,\n      password\n    })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        needsMfaOtp: false,\n        mfa: null,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          needsMfaOtp: false,\n          mfa: null,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'needsMfa' } })) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: false,\n          needsMfaOtp: true,\n          mfa: state.context.mfa,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          needsMfaOtp: false,\n          mfa: null,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          needsMfaOtp: false,\n          mfa: null,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, PasswordlessOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\nexport interface SignInEmailPasswordlessHandlerResult\n  extends ActionErrorState,\n    ActionSuccessState {}\nexport interface SignInEmailPasswordlessState\n  extends SignInEmailPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailPasswordlessPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  options?: PasswordlessOptions\n) =>\n  new Promise<SignInEmailPasswordlessHandlerResult>((resolve) => {\n    const { changed } = interpreter.send('PASSWORDLESS_EMAIL', {\n      email,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({ error: null, isError: false, isSuccess: true })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignInSecurityKeyPasswordlessHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignInSecurityKeyPasswordlessState\n  extends SignInSecurityKeyPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailSecurityKeyPromise = (interpreter: AuthInterpreter, email: string) =>\n  new Promise<SignInSecurityKeyPasswordlessHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send({ type: 'SIGNIN_SECURITY_KEY_EMAIL', email })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInMfaTotpHandlerResult extends SessionActionHandlerResult {}\n\nexport interface SignInMfaTotpState extends SignInMfaTotpHandlerResult, ActionLoadingState {}\n\nexport const signInMfaTotpPromise = (interpreter: AuthInterpreter, otp: string, ticket?: string) =>\n  new Promise<SignInMfaTotpHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNIN_MFA_TOTP', {\n      otp,\n      ticket\n    })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, PasswordlessOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface SignInSmsPasswordlessState\n  extends SignInSmsPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport interface SignInSmsPasswordlessHandlerResult extends ActionErrorState, ActionSuccessState {\n  /**\n   * Returns true when the one-time password has been sent over by SMS, and the user needs to send it back to complete sign-in.\n   */\n  needsOtp: boolean\n}\n\nexport const signInSmsPasswordlessPromise = (\n  interpreter: AuthInterpreter,\n  phoneNumber: string,\n  options?: PasswordlessOptions\n) =>\n  new Promise<SignInSmsPasswordlessHandlerResult>((resolve) => {\n    const { changed } = interpreter.send('PASSWORDLESS_SMS', { phoneNumber, options })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsOtp: false\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.needsOtp')) {\n        resolve({\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsOtp: true\n        })\n      } else if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsOtp: false\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInSmsPasswordlessOtpHandlerResult extends SessionActionHandlerResult {}\nexport interface SignInSmsPasswordlessOtpState\n  extends SignInSmsPasswordlessOtpHandlerResult,\n    ActionLoadingState {}\n\nexport const signInSmsPasswordlessOtpPromise = (\n  interpreter: AuthInterpreter,\n  phoneNumber: string,\n  otp: string\n) =>\n  new Promise<SignInSmsPasswordlessOtpHandlerResult>((resolve) => {\n    const { changed } = interpreter.send({ type: 'PASSWORDLESS_SMS_OTP', phoneNumber, otp })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        user: null,\n        accessToken: null\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          error: null,\n          isError: false,\n          isSuccess: true,\n          user: state.context.user,\n          accessToken: state.context.accessToken.value\n        })\n      } else if (state.matches({ registration: { incomplete: 'failed' } })) {\n        resolve({\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          user: null,\n          accessToken: null\n        })\n      }\n    })\n  })\n","import { USER_UNAUTHENTICATED } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface SignOutlessHandlerResult extends ActionErrorState, ActionSuccessState {}\nexport interface SignOutlessState extends SignOutlessHandlerResult, ActionLoadingState {}\n\nexport const signOutPromise = async (\n  interpreter: AuthInterpreter,\n  all?: boolean\n): Promise<SignOutlessHandlerResult> =>\n  new Promise<SignOutlessHandlerResult>((resolve) => {\n    const { event } = interpreter.send('SIGNOUT', { all })\n    if (event.type !== 'SIGNED_OUT') {\n      return resolve({ isSuccess: false, isError: true, error: USER_UNAUTHENTICATED })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: { signedOut: 'success' } })) {\n        resolve({ isSuccess: true, isError: false, error: null })\n      } else if (state.matches('authentication.signedOut.failed')) {\n        resolve({ isSuccess: false, isError: true, error: state.context.errors.signout || null })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, SignUpOptions } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignUpEmailPasswordHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignUpEmailPasswordState\n  extends SignUpEmailPasswordHandlerResult,\n    ActionLoadingState {}\n\nexport const signUpEmailPasswordPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  password: string,\n  options?: SignUpOptions\n): Promise<SignUpEmailPasswordHandlerResult> =>\n  new Promise<SignUpEmailPasswordHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNUP_EMAIL_PASSWORD', {\n      email,\n      password,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        accessToken: context.accessToken.value,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn', registration: 'complete' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, SignUpSecurityKeyOptions } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignUpSecurityKeyHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignUpSecurityKeyState\n  extends SignUpSecurityKeyHandlerResult,\n    ActionLoadingState {}\n\nexport const signUpEmailSecurityKeyPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  options?: SignUpSecurityKeyOptions\n): Promise<SignUpSecurityKeyHandlerResult> =>\n  new Promise<SignUpSecurityKeyHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNUP_SECURITY_KEY', {\n      email,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        accessToken: context.accessToken.value,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn', registration: 'complete' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n"],"names":["utf8StringToBuffer","value","bufferToBase64URLString","buffer","bytes","str","charCode","base64URLStringToBuffer","base64URLString","base64","padLength","padded","binary","i","browserSupportsWebAuthn","toPublicKeyCredentialDescriptor","descriptor","id","isValidDomain","hostname","WebAuthnError","message","name","identifyRegistrationError","error","options","_a","_b","publicKey","param","effectiveDomain","WebAuthnAbortService","webauthnAbortService","startRegistration","creationOptionsJSON","credential","err","rawId","response","type","credentialJSON","bufferToUTF8String","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","identifyAuthenticationError","startAuthentication","requestOptionsJSON","useBrowserAutofill","allowCredentials","userHandle","NHOST_REFRESH_TOKEN_KEY","NHOST_JWT_EXPIRES_AT_KEY","MIN_PASSWORD_LENGTH","TOKEN_REFRESH_MARGIN","REFRESH_TOKEN_RETRY_INTERVAL","NETWORK_ERROR_CODE","OTHER_ERROR_CODE","VALIDATION_ERROR_CODE","STATE_ERROR_CODE","CodifiedError","original","__publicField","INVALID_EMAIL_ERROR","INVALID_MFA_TYPE_ERROR","INVALID_MFA_CODE_ERROR","INVALID_PASSWORD_ERROR","INVALID_PHONE_NUMBER_ERROR","INVALID_MFA_TICKET_ERROR","NO_MFA_TICKET_ERROR","NO_REFRESH_TOKEN","TOKEN_REFRESHER_RUNNING_ERROR","USER_ALREADY_SIGNED_IN","USER_UNAUTHENTICATED","USER_NOT_ANONYMOUS","EMAIL_NEEDS_VERIFICATION","INVALID_REFRESH_TOKEN","INVALID_SIGN_IN_METHOD","nhostApiClient","backendUrl","client","axios","_e","_d","_c","_j","_i","_f","_h","_g","_l","_k","isBrowser","inMemoryLocalStorage","defaultClientStorageGetter","key","defaultClientStorageSetter","localStorageGetter","clientStorageType","clientStorage","Cookies","localStorageSetter","encodeQueryParameters","baseUrl","parameters","encodedParameters","stringValue","rewriteRedirectTo","clientUrl","redirectTo","otherOptions","baseClientUrl","clientParams","url","additionalParams","combinedParams","pathName","getParameterByName","regex","results","removeParameterFromWindow","location","search","hash","isValidEmail","email","isValidPassword","password","isValidPhoneNumber","phoneNumber","isValidTicket","ticket","INITIAL_MACHINE_CONTEXT","createChangeEmailMachine","interpreter","api","createMachine","assign","_","send","ctx","createChangePasswordMachine","createEnableMfaMachine","imageUrl","totpSecret","code","activeMfaType","data","createResetPasswordMachine","createSendVerificationEmailMachine","createAuthMachine","clientStorageGetter","clientStorageSetter","refreshIntervalTime","autoRefreshToken","autoSignIn","storageGetter","storageSetter","postRequest","config","importTokenAttempts","accessTokenExpiresIn","accessToken","nextRefresh","refreshToken","e","errors","context","expiresAt","otp","event","nickname","webAuthnOptions","urlToken","exception","storageToken","AuthClient","start","devTools","defaultOptions","interpret","token","existingToken","fn","AuthCookieClient","AuthClientSSR","addSecurityKeyPromise","changeEmailPromise","resolve","s","changePasswordPromise","state","generateQrCodePromise","service","activateMfaPromise","resetPasswordPromise","sendVerificationEmailPromise","signInAnonymousPromise","changed","signInEmailPasswordPromise","signInEmailPasswordlessPromise","signInEmailSecurityKeyPromise","signInMfaTotpPromise","signInSmsPasswordlessPromise","signInSmsPasswordlessOtpPromise","signOutPromise","all","signUpEmailPasswordPromise","signUpEmailSecurityKeyPromise"],"mappings":"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"}