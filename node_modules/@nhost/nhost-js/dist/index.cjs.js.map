{"version":3,"file":"index.cjs.js","sources":["../src/utils/helpers.ts","../src/clients/auth.ts","../src/clients/functions.ts","../src/clients/graphql.ts","../src/clients/storage.ts","../src/clients/nhost.ts"],"sourcesContent":["import { NhostClientConstructorParams } from './types'\n\n// a port can be a number or a placeholder string with leading and trailing double underscores, f.e. \"8080\" or \"__PLACEHOLDER_NAME__\"\nconst LOCALHOST_REGEX = /^((?<protocol>http[s]?):\\/\\/)?(?<host>localhost)(:(?<port>(\\d+|__\\w+__)))?$/\n\n/**\n * `backendUrl` should now be used only when self-hosting\n * `subdomain` and `region` should be used instead when using the Nhost platform\n * `\n * @param backendOrSubdomain\n * @param service\n * @returns\n */\nexport function urlFromSubdomain(\n  backendOrSubdomain: Pick<NhostClientConstructorParams, 'region' | 'subdomain' | 'backendUrl'>,\n  service: string\n): string {\n  const { backendUrl, subdomain, region } = backendOrSubdomain\n\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`\n  }\n\n  if (!subdomain) {\n    throw new Error('Either `backendUrl` or `subdomain` must be set.')\n  }\n\n  // check if subdomain is [http[s]://]localhost[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound?.groups) {\n    const { protocol = 'http', host, port = 1337 } = subdomainLocalhostFound.groups\n\n    const urlFromEnv = getValueFromEnv(service)\n    if (urlFromEnv) {\n      return urlFromEnv\n    }\n    return `${protocol}://${host}:${port}/v1/${service}`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n\n/**\n *\n * @returns whether the code is running in a browser\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n *\n * @returns whether the code is running in a Node.js environment\n */\nfunction environmentIsAvailable() {\n  return typeof process !== 'undefined' && process.env\n}\n\n/**\n *\n * @param service auth | storage | graphql | functions\n * @returns the service's url if the corresponding env var is set\n * NHOST_${service}_URL\n */\nfunction getValueFromEnv(service: string) {\n  if (isBrowser() || !environmentIsAvailable()) {\n    return null\n  }\n\n  return process.env[`NHOST_${service.toUpperCase()}_URL`]\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Auth from either a subdomain or a URL\n */\nexport function createAuthClient(params: NhostClientConstructorParams) {\n  const authUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'auth')\n      : params.authUrl\n\n  if (!authUrl) {\n    throw new Error('Please provide `subdomain` or `authUrl`.')\n  }\n\n  return new HasuraAuthClient({ url: authUrl, ...params })\n}\n","import axios, {\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  RawAxiosRequestHeaders\n} from 'axios'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { FunctionCallResponse, NhostClientConstructorParams } from '../utils/types'\nexport interface NhostFunctionsConstructorParams {\n  /**\n   * Serverless Functions endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * Creates a client for Functions from either a subdomain or a URL\n */\nexport function createFunctionsClient(params: NhostClientConstructorParams) {\n  const functionsUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'functions')\n      : params.functionsUrl\n\n  if (!functionsUrl) {\n    throw new Error('Please provide `subdomain` or `functionsUrl`.')\n  }\n\n  return new NhostFunctionsClient({ url: functionsUrl, ...params })\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  readonly url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function.\n   *\n   * @example\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<T = unknown, D = any>(\n    url: string,\n    data: D,\n    config?: AxiosRequestConfig\n  ): Promise<FunctionCallResponse<T>> {\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    let res\n    try {\n      res = await this.instance.post<T, AxiosResponse<T>, D>(url, data, { ...config, headers })\n    } catch (error) {\n      if (error instanceof Error) {\n        return { res: null, error }\n      }\n    }\n\n    if (!res) {\n      return {\n        res: null,\n        error: new Error('Unable to make post request to funtion')\n      }\n    }\n\n    return { res, error: null }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): RawAxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport { DocumentNode, print } from 'graphql'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport {\n  GraphqlRequestResponse,\n  GraphqlResponse,\n  NhostClientConstructorParams\n} from '../utils/types'\n\nexport interface NhostGraphqlConstructorParams {\n  /**\n   * GraphQL endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * Creates a client for GraphQL from either a subdomain or a URL\n */\nexport function createGraphqlClient(params: NhostClientConstructorParams) {\n  const graphqlUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'graphql')\n      : params.graphqlUrl\n\n  if (!graphqlUrl) {\n    throw new Error('Please provide `subdomain` or `graphqlUrl`.')\n  }\n\n  return new NhostGraphqlClient({ url: graphqlUrl, ...params })\n}\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  readonly url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/request\n   */\n  async request<T = any, V = any>(\n    document: string | DocumentNode,\n    variables?: V,\n    config?: AxiosRequestConfig\n  ): Promise<GraphqlRequestResponse<T>> {\n    // add auth headers if any\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers,\n      'Accept-Encoding': '*'\n    }\n\n    try {\n      const operationName = ''\n      const res = await this.instance.post<GraphqlResponse<T>>(\n        '',\n        {\n          operationName: operationName || undefined,\n          query: typeof document === 'string' ? document : print(document),\n          variables\n        },\n        { ...config, headers }\n      )\n\n      const responseData = res.data\n      const { data } = responseData\n\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        }\n      }\n\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error('incorrect response data from GraphQL server')\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (error instanceof Error) {\n        return { data: null, error }\n      }\n      console.error(error)\n      return {\n        data: null,\n        error: new Error('Unable to get do GraphQL request')\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl` to get the GraphQL URL.\n   *\n   * @example\n   * ```ts\n   * const url = nhost.graphql.getUrl();\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/get-url\n   */\n  getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): Record<string, string> {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Storage from either a subdomain or a URL\n */\nexport function createStorageClient(params: NhostClientConstructorParams) {\n  const storageUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'storage')\n      : params.storageUrl\n\n  if (!storageUrl) {\n    throw new Error('Please provide `subdomain` or `storageUrl`.')\n  }\n\n  return new HasuraStorageClient({ url: storageUrl, ...params })\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { NhostClientConstructorParams } from '../utils/types'\n\nimport { createAuthClient } from './auth'\nimport { createFunctionsClient, NhostFunctionsClient } from './functions'\nimport { createGraphqlClient, NhostGraphqlClient } from './graphql'\nimport { createStorageClient } from './storage'\n\nexport const createNhostClient = (params: NhostClientConstructorParams) => new NhostClient(params)\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   * Nhost Client\n   *\n   * @example\n   * ```ts\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorageGetter,\n    clientStorageSetter,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    // * Set clients for all services\n    this.auth = createAuthClient({\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start,\n      ...urlParams\n    })\n    this.storage = createStorageClient({ adminSecret, ...urlParams })\n    this.functions = createFunctionsClient({ adminSecret, ...urlParams })\n    this.graphql = createGraphqlClient({ adminSecret, ...urlParams })\n\n    this.auth.client.onStart(() => {\n      // * Set current token if token is already accessable\n      const accessToken = this.auth.getAccessToken()\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n      // * Set access token when signing out\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === 'SIGNED_OUT') {\n          this.storage.setAccessToken(undefined)\n          this.functions.setAccessToken(undefined)\n          this.graphql.setAccessToken(undefined)\n        }\n      })\n\n      // * Update access token for clients, including when signin in\n      this.auth.onTokenChanged((session) => {\n        const accessToken = session?.accessToken\n        this.storage.setAccessToken(accessToken)\n        this.functions.setAccessToken(accessToken)\n        this.graphql.setAccessToken(accessToken)\n      })\n    })\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n}\n"],"names":["LOCALHOST_REGEX","urlFromSubdomain","backendOrSubdomain","service","backendUrl","subdomain","region","subdomainLocalhostFound","protocol","host","port","urlFromEnv","getValueFromEnv","isBrowser","environmentIsAvailable","createAuthClient","params","authUrl","HasuraAuthClient","createFunctionsClient","functionsUrl","NhostFunctionsClient","__publicField","url","adminSecret","axios","data","config","headers","res","error","accessToken","createGraphqlClient","graphqlUrl","NhostGraphqlClient","document","variables","operationName","responseData","print","createStorageClient","storageUrl","HasuraStorageClient","createNhostClient","NhostClient","refreshIntervalTime","clientStorageGetter","clientStorageSetter","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","urlParams","_event","session","newValue"],"mappings":"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"}