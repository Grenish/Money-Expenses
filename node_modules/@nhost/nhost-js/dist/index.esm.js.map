{"version":3,"file":"index.esm.js","sources":["../src/utils/helpers.ts","../src/clients/auth.ts","../src/clients/functions.ts","../src/clients/graphql.ts","../src/clients/storage.ts","../src/clients/nhost.ts"],"sourcesContent":["import { NhostClientConstructorParams } from './types'\n\n// a port can be a number or a placeholder string with leading and trailing double underscores, f.e. \"8080\" or \"__PLACEHOLDER_NAME__\"\nconst LOCALHOST_REGEX = /^((?<protocol>http[s]?):\\/\\/)?(?<host>localhost)(:(?<port>(\\d+|__\\w+__)))?$/\n\n/**\n * `backendUrl` should now be used only when self-hosting\n * `subdomain` and `region` should be used instead when using the Nhost platform\n * `\n * @param backendOrSubdomain\n * @param service\n * @returns\n */\nexport function urlFromSubdomain(\n  backendOrSubdomain: Pick<NhostClientConstructorParams, 'region' | 'subdomain' | 'backendUrl'>,\n  service: string\n): string {\n  const { backendUrl, subdomain, region } = backendOrSubdomain\n\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`\n  }\n\n  if (!subdomain) {\n    throw new Error('Either `backendUrl` or `subdomain` must be set.')\n  }\n\n  // check if subdomain is [http[s]://]localhost[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound?.groups) {\n    const { protocol = 'http', host, port = 1337 } = subdomainLocalhostFound.groups\n\n    const urlFromEnv = getValueFromEnv(service)\n    if (urlFromEnv) {\n      return urlFromEnv\n    }\n    return `${protocol}://${host}:${port}/v1/${service}`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n\n/**\n *\n * @returns whether the code is running in a browser\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n *\n * @returns whether the code is running in a Node.js environment\n */\nfunction environmentIsAvailable() {\n  return typeof process !== 'undefined' && process.env\n}\n\n/**\n *\n * @param service auth | storage | graphql | functions\n * @returns the service's url if the corresponding env var is set\n * NHOST_${service}_URL\n */\nfunction getValueFromEnv(service: string) {\n  if (isBrowser() || !environmentIsAvailable()) {\n    return null\n  }\n\n  return process.env[`NHOST_${service.toUpperCase()}_URL`]\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Auth from either a subdomain or a URL\n */\nexport function createAuthClient(params: NhostClientConstructorParams) {\n  const authUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'auth')\n      : params.authUrl\n\n  if (!authUrl) {\n    throw new Error('Please provide `subdomain` or `authUrl`.')\n  }\n\n  return new HasuraAuthClient({ url: authUrl, ...params })\n}\n","import axios, {\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  RawAxiosRequestHeaders\n} from 'axios'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { FunctionCallResponse, NhostClientConstructorParams } from '../utils/types'\nexport interface NhostFunctionsConstructorParams {\n  /**\n   * Serverless Functions endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * Creates a client for Functions from either a subdomain or a URL\n */\nexport function createFunctionsClient(params: NhostClientConstructorParams) {\n  const functionsUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'functions')\n      : params.functionsUrl\n\n  if (!functionsUrl) {\n    throw new Error('Please provide `subdomain` or `functionsUrl`.')\n  }\n\n  return new NhostFunctionsClient({ url: functionsUrl, ...params })\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  readonly url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function.\n   *\n   * @example\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<T = unknown, D = any>(\n    url: string,\n    data: D,\n    config?: AxiosRequestConfig\n  ): Promise<FunctionCallResponse<T>> {\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    let res\n    try {\n      res = await this.instance.post<T, AxiosResponse<T>, D>(url, data, { ...config, headers })\n    } catch (error) {\n      if (error instanceof Error) {\n        return { res: null, error }\n      }\n    }\n\n    if (!res) {\n      return {\n        res: null,\n        error: new Error('Unable to make post request to funtion')\n      }\n    }\n\n    return { res, error: null }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): RawAxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport { DocumentNode, print } from 'graphql'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport {\n  GraphqlRequestResponse,\n  GraphqlResponse,\n  NhostClientConstructorParams\n} from '../utils/types'\n\nexport interface NhostGraphqlConstructorParams {\n  /**\n   * GraphQL endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * Creates a client for GraphQL from either a subdomain or a URL\n */\nexport function createGraphqlClient(params: NhostClientConstructorParams) {\n  const graphqlUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'graphql')\n      : params.graphqlUrl\n\n  if (!graphqlUrl) {\n    throw new Error('Please provide `subdomain` or `graphqlUrl`.')\n  }\n\n  return new NhostGraphqlClient({ url: graphqlUrl, ...params })\n}\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  readonly url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/request\n   */\n  async request<T = any, V = any>(\n    document: string | DocumentNode,\n    variables?: V,\n    config?: AxiosRequestConfig\n  ): Promise<GraphqlRequestResponse<T>> {\n    // add auth headers if any\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers,\n      'Accept-Encoding': '*'\n    }\n\n    try {\n      const operationName = ''\n      const res = await this.instance.post<GraphqlResponse<T>>(\n        '',\n        {\n          operationName: operationName || undefined,\n          query: typeof document === 'string' ? document : print(document),\n          variables\n        },\n        { ...config, headers }\n      )\n\n      const responseData = res.data\n      const { data } = responseData\n\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        }\n      }\n\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error('incorrect response data from GraphQL server')\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (error instanceof Error) {\n        return { data: null, error }\n      }\n      console.error(error)\n      return {\n        data: null,\n        error: new Error('Unable to get do GraphQL request')\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl` to get the GraphQL URL.\n   *\n   * @example\n   * ```ts\n   * const url = nhost.graphql.getUrl();\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/get-url\n   */\n  getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): Record<string, string> {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Storage from either a subdomain or a URL\n */\nexport function createStorageClient(params: NhostClientConstructorParams) {\n  const storageUrl =\n    'subdomain' in params || 'backendUrl' in params\n      ? urlFromSubdomain(params, 'storage')\n      : params.storageUrl\n\n  if (!storageUrl) {\n    throw new Error('Please provide `subdomain` or `storageUrl`.')\n  }\n\n  return new HasuraStorageClient({ url: storageUrl, ...params })\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { NhostClientConstructorParams } from '../utils/types'\n\nimport { createAuthClient } from './auth'\nimport { createFunctionsClient, NhostFunctionsClient } from './functions'\nimport { createGraphqlClient, NhostGraphqlClient } from './graphql'\nimport { createStorageClient } from './storage'\n\nexport const createNhostClient = (params: NhostClientConstructorParams) => new NhostClient(params)\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   * Nhost Client\n   *\n   * @example\n   * ```ts\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorageGetter,\n    clientStorageSetter,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    // * Set clients for all services\n    this.auth = createAuthClient({\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start,\n      ...urlParams\n    })\n    this.storage = createStorageClient({ adminSecret, ...urlParams })\n    this.functions = createFunctionsClient({ adminSecret, ...urlParams })\n    this.graphql = createGraphqlClient({ adminSecret, ...urlParams })\n\n    this.auth.client.onStart(() => {\n      // * Set current token if token is already accessable\n      const accessToken = this.auth.getAccessToken()\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n      // * Set access token when signing out\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === 'SIGNED_OUT') {\n          this.storage.setAccessToken(undefined)\n          this.functions.setAccessToken(undefined)\n          this.graphql.setAccessToken(undefined)\n        }\n      })\n\n      // * Update access token for clients, including when signin in\n      this.auth.onTokenChanged((session) => {\n        const accessToken = session?.accessToken\n        this.storage.setAccessToken(accessToken)\n        this.functions.setAccessToken(accessToken)\n        this.graphql.setAccessToken(accessToken)\n      })\n    })\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n}\n"],"names":["LOCALHOST_REGEX","urlFromSubdomain","backendOrSubdomain","service","backendUrl","subdomain","region","subdomainLocalhostFound","protocol","host","port","urlFromEnv","getValueFromEnv","isBrowser","environmentIsAvailable","createAuthClient","params","authUrl","HasuraAuthClient","createFunctionsClient","functionsUrl","NhostFunctionsClient","__publicField","url","adminSecret","axios","data","config","headers","res","error","accessToken","createGraphqlClient","graphqlUrl","NhostGraphqlClient","document","variables","operationName","responseData","print","createStorageClient","storageUrl","HasuraStorageClient","createNhostClient","NhostClient","refreshIntervalTime","clientStorageGetter","clientStorageSetter","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","urlParams","_event","session","newValue"],"mappings":"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"}